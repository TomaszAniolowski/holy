xquery version "1.0-ml";

import module namespace test = "http://marklogic.com/test" at "/test/test-helper.xqy";
import module namespace http-utils = 'http://marklogic.com/holy/ml-modules/http-utils' at '/libs/http-utils.xqy';
import module namespace hhc = "http://marklogic.com/holy/ml-modules/holy-hub-constants" at "/constants/holy-hub-constants.xqy";

declare variable $SIGLUM-INVALID as xs:string := 'Rdz 1-3,2';
declare variable $SIGLUM-TOME as xs:string := 'Rdz';
declare variable $SIGLUM-SINGLE-CHAPTER as xs:string := 'Rdz 1';
declare variable $SIGLUM-CHAPTER-RANGE-CORRECT as xs:string := 'Rdz 1-3';
declare variable $SIGLUM-CHAPTER-RANGE-INCORRECT-1 as xs:string := 'Rdz 1-1';
declare variable $SIGLUM-CHAPTER-RANGE-INCORRECT-2 as xs:string := 'Rdz 3-1';
declare variable $SIGLUM-CHAPTER-RANGE-OVERLAPPING as xs:string := 'Rdz 1-3; 2-5';
declare variable $SIGLUM-CHAPTER-RANGE-OVERLAPPING-2 as xs:string := 'Iz 2; 1-6';
declare variable $SIGLUM-CHAPTER-SEQUENCE as xs:string := 'Rdz 1; 3';
declare variable $SIGLUM-CHAPTER-SEQUENCE-OVERLAPPING as xs:string := 'Rdz 1; 1';
declare variable $SIGLUM-CHAPTER-RANGE-SEQUENCE-OVERLAPPING as xs:string := 'Rdz 1-3; 2';
declare variable $SIGLUM-SINGLE-VERSE as xs:string := 'Rdz 1,1';
declare variable $SIGLUM-VERSE-RANGE-CORRECT as xs:string := 'Rdz 1,1-3';
declare variable $SIGLUM-VERSE-RANGE-INCORRECT-1 as xs:string := 'Rdz 1,1-1';
declare variable $SIGLUM-VERSE-RANGE-INCORRECT-2 as xs:string := 'Rdz 1,3-1';
declare variable $SIGLUM-VERSE-RANGE-OVERLAPPING as xs:string := 'Rdz 1,1-3. 2-5';
declare variable $SIGLUM-VERSE-SEQUENCE as xs:string := 'Rdz 1,1. 3';
declare variable $SIGLUM-VERSE-NEXT as xs:string := 'Rdz 1,1n';
declare variable $SIGLUM-VERSE-NEXT-NEXT as xs:string := 'Rdz 1,1nn';
declare variable $SIGLUM-VERSE-SEQUENCE-NEXT as xs:string := 'Rdz 1,1. 3n';
declare variable $SIGLUM-VERSE-SEQUENCE-OVERLAPPING-1 as xs:string := 'Rdz 1,1. 1';
declare variable $SIGLUM-VERSE-SEQUENCE-OVERLAPPING-2 as xs:string := 'Rdz 1,1n. 2';
declare variable $SIGLUM-VERSE-SEQUENCE-OVERLAPPING-3 as xs:string := 'Rdz 1,1. 2n. 3';
declare variable $SIGLUM-VERSE-RANGE-SEQUENCE-OVERLAPPING as xs:string := 'Rdz 1,1-3. 2';
declare variable $SIGLUM-VARIETY-1 as xs:string := 'Rdz 1; 3,5; 5,6-10; 8; 10,2. 5. 8-11';
declare variable $SIGLUM-VARIETY-2 as xs:string := 'Rdz 1; 3; 3,6';
declare variable $SIGLUM-VARIETY-3 as xs:string := 'Rdz 5,3; 5,4; 5,5';
declare variable $SIGLUM-VARIETY-4 as xs:string := 'Rdz 5,3-6; 5,4; 5,5';

declare variable $PARAMS-INVALID as map:map := map:new(map:entry('rs:siglum', $SIGLUM-INVALID));
declare variable $PARAMS-TOME as map:map := map:new(map:entry('rs:siglum', $SIGLUM-TOME));
declare variable $PARAMS-SINGLE-CHAPTER as map:map := map:new(map:entry('rs:siglum', $SIGLUM-SINGLE-CHAPTER));
declare variable $PARAMS-CHAPTER-RANGE-CORRECT as map:map := map:new(map:entry('rs:siglum', $SIGLUM-CHAPTER-RANGE-CORRECT));
declare variable $PARAMS-CHAPTER-RANGE-INCORRECT-1 as map:map := map:new(map:entry('rs:siglum', $SIGLUM-CHAPTER-RANGE-INCORRECT-1));
declare variable $PARAMS-CHAPTER-RANGE-INCORRECT-2 as map:map := map:new(map:entry('rs:siglum', $SIGLUM-CHAPTER-RANGE-INCORRECT-2));
declare variable $PARAMS-CHAPTER-RANGE-OVERLAPPING as map:map := map:new(map:entry('rs:siglum', $SIGLUM-CHAPTER-RANGE-OVERLAPPING));
declare variable $PARAMS-CHAPTER-RANGE-OVERLAPPING-2 as map:map := map:new(map:entry('rs:siglum', $SIGLUM-CHAPTER-RANGE-OVERLAPPING-2));
declare variable $PARAMS-CHAPTER-SEQUENCE as map:map := map:new(map:entry('rs:siglum', $SIGLUM-CHAPTER-SEQUENCE));
declare variable $PARAMS-CHAPTER-SEQUENCE-OVERLAPPING as map:map := map:new(map:entry('rs:siglum', $SIGLUM-CHAPTER-SEQUENCE-OVERLAPPING));
declare variable $PARAMS-CHAPTER-RANGE-SEQUENCE-OVERLAPPING as map:map := map:new(map:entry('rs:siglum', $SIGLUM-CHAPTER-RANGE-SEQUENCE-OVERLAPPING));
declare variable $PARAMS-SINGLE-VERSE as map:map := map:new(map:entry('rs:siglum', $SIGLUM-SINGLE-VERSE));
declare variable $PARAMS-VERSE-RANGE-CORRECT as map:map := map:new(map:entry('rs:siglum', $SIGLUM-VERSE-RANGE-CORRECT));
declare variable $PARAMS-VERSE-RANGE-INCORRECT-1 as map:map := map:new(map:entry('rs:siglum', $SIGLUM-VERSE-RANGE-INCORRECT-1));
declare variable $PARAMS-VERSE-RANGE-INCORRECT-2 as map:map := map:new(map:entry('rs:siglum', $SIGLUM-VERSE-RANGE-INCORRECT-2));
declare variable $PARAMS-VERSE-RANGE-OVERLAPPING as map:map := map:new(map:entry('rs:siglum', $SIGLUM-VERSE-RANGE-OVERLAPPING));
declare variable $PARAMS-VERSE-SEQUENCE as map:map := map:new(map:entry('rs:siglum', $SIGLUM-VERSE-SEQUENCE));
declare variable $PARAMS-VERSE-NEXT as map:map := map:new(map:entry('rs:siglum', $SIGLUM-VERSE-NEXT));
declare variable $PARAMS-VERSE-NEXT-NEXT as map:map := map:new(map:entry('rs:siglum', $SIGLUM-VERSE-NEXT-NEXT));
declare variable $PARAMS-VERSE-SEQUENCE-NEXT as map:map := map:new(map:entry('rs:siglum', $SIGLUM-VERSE-SEQUENCE-NEXT));
declare variable $PARAMS-VERSE-SEQUENCE-OVERLAPPING-1 as map:map := map:new(map:entry('rs:siglum', $SIGLUM-VERSE-SEQUENCE-OVERLAPPING-1));
declare variable $PARAMS-VERSE-SEQUENCE-OVERLAPPING-2 as map:map := map:new(map:entry('rs:siglum', $SIGLUM-VERSE-SEQUENCE-OVERLAPPING-2));
declare variable $PARAMS-VERSE-SEQUENCE-OVERLAPPING-3 as map:map := map:new(map:entry('rs:siglum', $SIGLUM-VERSE-SEQUENCE-OVERLAPPING-3));
declare variable $PARAMS-VERSE-RANGE-SEQUENCE-OVERLAPPING as map:map := map:new(map:entry('rs:siglum', $SIGLUM-VERSE-RANGE-SEQUENCE-OVERLAPPING));
declare variable $PARAMS-VARIETY-1 as map:map := map:new(map:entry('rs:siglum', $SIGLUM-VARIETY-1));
declare variable $PARAMS-VARIETY-2 as map:map := map:new(map:entry('rs:siglum', $SIGLUM-VARIETY-2));
declare variable $PARAMS-VARIETY-3 as map:map := map:new(map:entry('rs:siglum', $SIGLUM-VARIETY-3));
declare variable $PARAMS-VARIETY-4 as map:map := map:new(map:entry('rs:siglum', $SIGLUM-VARIETY-4));

let $expected-resp-body-siglum-invalid := test:get-test-file('many-verses-' || fn:replace($SIGLUM-INVALID, ' ', '_') || '.json', 'json')
let $expected-resp-body-siglum-tome := test:get-test-file('many-verses-' || fn:replace($SIGLUM-TOME, ' ', '_') || '.json', 'json')
let $expected-resp-body-single-chapter := test:get-test-file('many-verses-' || fn:replace($SIGLUM-SINGLE-CHAPTER, ' ', '_') || '.json', 'json')
let $expected-resp-body-chapter-range-correct := test:get-test-file('many-verses-' || fn:replace($SIGLUM-CHAPTER-RANGE-CORRECT, ' ', '_') || '.json', 'json')
let $expected-resp-body-chapter-range-incorrect-1 := test:get-test-file('many-verses-' || fn:replace($SIGLUM-CHAPTER-RANGE-INCORRECT-1, ' ', '_') || '.json', 'json')
let $expected-resp-body-chapter-range-incorrect-2 := test:get-test-file('many-verses-' || fn:replace($SIGLUM-CHAPTER-RANGE-INCORRECT-2, ' ', '_') || '.json', 'json')
let $expected-resp-body-chapter-range-overlapping := test:get-test-file('many-verses-' || fn:replace($SIGLUM-CHAPTER-RANGE-OVERLAPPING, ' ', '_') || '.json', 'json')
let $expected-resp-body-chapter-range-overlapping-2 := test:get-test-file('many-verses-' || fn:replace($SIGLUM-CHAPTER-RANGE-OVERLAPPING-2, ' ', '_') || '.json', 'json')
let $expected-resp-body-chapter-sequence := test:get-test-file('many-verses-' || fn:replace($SIGLUM-CHAPTER-SEQUENCE, ' ', '_') || '.json', 'json')
let $expected-resp-body-chapter-sequence-overlapping := test:get-test-file('many-verses-' || fn:replace($SIGLUM-CHAPTER-SEQUENCE-OVERLAPPING, ' ', '_') || '.json', 'json')
let $expected-resp-body-chapter-range-sequence-overlapping := test:get-test-file('many-verses-' || fn:replace($SIGLUM-CHAPTER-RANGE-SEQUENCE-OVERLAPPING, ' ', '_') || '.json', 'json')
let $expected-resp-body-single-verse := test:get-test-file('many-verses-' || fn:replace($SIGLUM-SINGLE-VERSE, ' ', '_') || '.json', 'json')
let $expected-resp-body-verse-range-correct := test:get-test-file('many-verses-' || fn:replace($SIGLUM-VERSE-RANGE-CORRECT, ' ', '_') || '.json', 'json')
let $expected-resp-body-verse-range-incorrect-1 := test:get-test-file('many-verses-' || fn:replace($SIGLUM-VERSE-RANGE-INCORRECT-1, ' ', '_') || '.json', 'json')
let $expected-resp-body-verse-range-incorrect-2 := test:get-test-file('many-verses-' || fn:replace($SIGLUM-VERSE-RANGE-INCORRECT-2, ' ', '_') || '.json', 'json')
let $expected-resp-body-verse-range-overlapping := test:get-test-file('many-verses-' || fn:replace($SIGLUM-VERSE-RANGE-OVERLAPPING, ' ', '_') || '.json', 'json')
let $expected-resp-body-verse-sequence := test:get-test-file('many-verses-' || fn:replace($SIGLUM-VERSE-SEQUENCE, ' ', '_') || '.json', 'json')
let $expected-resp-body-verse-next := test:get-test-file('many-verses-' || fn:replace($SIGLUM-VERSE-NEXT, ' ', '_') || '.json', 'json')
let $expected-resp-body-verse-next-next := test:get-test-file('many-verses-' || fn:replace($SIGLUM-VERSE-NEXT-NEXT, ' ', '_') || '.json', 'json')
let $expected-resp-body-verse-sequence-next := test:get-test-file('many-verses-' || fn:replace($SIGLUM-VERSE-SEQUENCE-NEXT, ' ', '_') || '.json', 'json')
let $expected-resp-body-verse-sequence-overlapping-1 := test:get-test-file('many-verses-' || fn:replace($SIGLUM-VERSE-SEQUENCE-OVERLAPPING-1, ' ', '_') || '.json', 'json')
let $expected-resp-body-verse-sequence-overlapping-2 := test:get-test-file('many-verses-' || fn:replace($SIGLUM-VERSE-SEQUENCE-OVERLAPPING-2, ' ', '_') || '.json', 'json')
let $expected-resp-body-verse-sequence-overlapping-3 := test:get-test-file('many-verses-' || fn:replace($SIGLUM-VERSE-SEQUENCE-OVERLAPPING-3, ' ', '_') || '.json', 'json')
let $expected-resp-body-verse-range-sequence-overlapping := test:get-test-file('many-verses-' || fn:replace($SIGLUM-VERSE-RANGE-SEQUENCE-OVERLAPPING, ' ', '_') || '.json', 'json')
let $expected-resp-body-siglum-variety-1 := test:get-test-file('many-verses-' || fn:replace($SIGLUM-VARIETY-1, ' ', '_') || '.json', 'json')
let $expected-resp-body-siglum-variety-2 := test:get-test-file('many-verses-' || fn:replace($SIGLUM-VARIETY-2, ' ', '_') || '.json', 'json')
let $expected-resp-body-siglum-variety-3 := test:get-test-file('many-verses-' || fn:replace($SIGLUM-VARIETY-3, ' ', '_') || '.json', 'json')
let $expected-resp-body-siglum-variety-4 := test:get-test-file('many-verses-' || fn:replace($SIGLUM-VARIETY-4, ' ', '_') || '.json', 'json')

let $actual-resp-siglum-invalid := http-utils:ml-resource-get($hhc:RESOURCES-GET-VERSES, $PARAMS-INVALID)
let $actual-resp-siglum-tome := http-utils:ml-resource-get($hhc:RESOURCES-GET-VERSES, $PARAMS-TOME)
let $actual-resp-single-chapter := http-utils:ml-resource-get($hhc:RESOURCES-GET-VERSES, $PARAMS-SINGLE-CHAPTER)
let $actual-resp-chapter-range-correct := http-utils:ml-resource-get($hhc:RESOURCES-GET-VERSES, $PARAMS-CHAPTER-RANGE-CORRECT)
let $actual-resp-chapter-range-incorrect-1 := http-utils:ml-resource-get($hhc:RESOURCES-GET-VERSES, $PARAMS-CHAPTER-RANGE-INCORRECT-1)
let $actual-resp-chapter-range-incorrect-2 := http-utils:ml-resource-get($hhc:RESOURCES-GET-VERSES, $PARAMS-CHAPTER-RANGE-INCORRECT-2)
let $actual-resp-chapter-range-overlapping := http-utils:ml-resource-get($hhc:RESOURCES-GET-VERSES, $PARAMS-CHAPTER-RANGE-OVERLAPPING)
let $actual-resp-chapter-range-overlapping-2 := http-utils:ml-resource-get($hhc:RESOURCES-GET-VERSES, $PARAMS-CHAPTER-RANGE-OVERLAPPING-2)
let $actual-resp-chapter-sequence := http-utils:ml-resource-get($hhc:RESOURCES-GET-VERSES, $PARAMS-CHAPTER-SEQUENCE)
let $actual-resp-chapter-sequence-overlapping := http-utils:ml-resource-get($hhc:RESOURCES-GET-VERSES, $PARAMS-CHAPTER-SEQUENCE-OVERLAPPING)
let $actual-resp-chapter-range-sequence-overlapping := http-utils:ml-resource-get($hhc:RESOURCES-GET-VERSES, $PARAMS-CHAPTER-RANGE-SEQUENCE-OVERLAPPING)
let $actual-resp-single-verse := http-utils:ml-resource-get($hhc:RESOURCES-GET-VERSES, $PARAMS-SINGLE-VERSE)
let $actual-resp-verse-range-correct := http-utils:ml-resource-get($hhc:RESOURCES-GET-VERSES, $PARAMS-VERSE-RANGE-CORRECT)
let $actual-resp-verse-range-incorrect-1 := http-utils:ml-resource-get($hhc:RESOURCES-GET-VERSES, $PARAMS-VERSE-RANGE-INCORRECT-1)
let $actual-resp-verse-range-incorrect-2 := http-utils:ml-resource-get($hhc:RESOURCES-GET-VERSES, $PARAMS-VERSE-RANGE-INCORRECT-2)
let $actual-resp-verse-range-overlapping := http-utils:ml-resource-get($hhc:RESOURCES-GET-VERSES, $PARAMS-VERSE-RANGE-OVERLAPPING)
let $actual-resp-verse-sequence := http-utils:ml-resource-get($hhc:RESOURCES-GET-VERSES, $PARAMS-VERSE-SEQUENCE)
let $actual-resp-verse-next := http-utils:ml-resource-get($hhc:RESOURCES-GET-VERSES, $PARAMS-VERSE-NEXT)
let $actual-resp-verse-next-next := http-utils:ml-resource-get($hhc:RESOURCES-GET-VERSES, $PARAMS-VERSE-NEXT-NEXT)
let $actual-resp-verse-sequence-next := http-utils:ml-resource-get($hhc:RESOURCES-GET-VERSES, $PARAMS-VERSE-SEQUENCE-NEXT)
let $actual-resp-verse-sequence-overlapping-1 := http-utils:ml-resource-get($hhc:RESOURCES-GET-VERSES, $PARAMS-VERSE-SEQUENCE-OVERLAPPING-1)
let $actual-resp-verse-sequence-overlapping-2 := http-utils:ml-resource-get($hhc:RESOURCES-GET-VERSES, $PARAMS-VERSE-SEQUENCE-OVERLAPPING-2)
let $actual-resp-verse-sequence-overlapping-3 := http-utils:ml-resource-get($hhc:RESOURCES-GET-VERSES, $PARAMS-VERSE-SEQUENCE-OVERLAPPING-3)
let $actual-resp-verse-range-sequence-overlapping := http-utils:ml-resource-get($hhc:RESOURCES-GET-VERSES, $PARAMS-VERSE-RANGE-SEQUENCE-OVERLAPPING)
let $actual-resp-siglum-variety-1 := http-utils:ml-resource-get($hhc:RESOURCES-GET-VERSES, $PARAMS-VARIETY-1)
let $actual-resp-siglum-variety-2 := http-utils:ml-resource-get($hhc:RESOURCES-GET-VERSES, $PARAMS-VARIETY-2)
let $actual-resp-siglum-variety-3 := http-utils:ml-resource-get($hhc:RESOURCES-GET-VERSES, $PARAMS-VARIETY-3)
let $actual-resp-siglum-variety-4 := http-utils:ml-resource-get($hhc:RESOURCES-GET-VERSES, $PARAMS-VARIETY-4)

let $actual-resp-code-siglum-invalid := http-utils:get-code($actual-resp-siglum-invalid)
let $actual-resp-code-siglum-tome := http-utils:get-code($actual-resp-siglum-tome)
let $actual-resp-code-single-chapter := http-utils:get-code($actual-resp-single-chapter)
let $actual-resp-code-chapter-range-correct := http-utils:get-code($actual-resp-chapter-range-correct)
let $actual-resp-code-chapter-range-incorrect-1 := http-utils:get-code($actual-resp-chapter-range-incorrect-1)
let $actual-resp-code-chapter-range-incorrect-2 := http-utils:get-code($actual-resp-chapter-range-incorrect-2)
let $actual-resp-code-chapter-range-overlapping := http-utils:get-code($actual-resp-chapter-range-overlapping)
let $actual-resp-code-chapter-range-overlapping-2 := http-utils:get-code($actual-resp-chapter-range-overlapping-2)
let $actual-resp-code-chapter-sequence := http-utils:get-code($actual-resp-chapter-sequence)
let $actual-resp-code-chapter-sequence-overlapping := http-utils:get-code($actual-resp-chapter-sequence-overlapping)
let $actual-resp-code-chapter-range-sequence-overlapping := http-utils:get-code($actual-resp-chapter-range-sequence-overlapping)
let $actual-resp-code-single-verse := http-utils:get-code($actual-resp-single-verse)
let $actual-resp-code-verse-range-correct := http-utils:get-code($actual-resp-verse-range-correct)
let $actual-resp-code-verse-range-incorrect-1 := http-utils:get-code($actual-resp-verse-range-incorrect-1)
let $actual-resp-code-verse-range-incorrect-2 := http-utils:get-code($actual-resp-verse-range-incorrect-2)
let $actual-resp-code-verse-range-overlapping := http-utils:get-code($actual-resp-verse-range-overlapping)
let $actual-resp-code-verse-sequence := http-utils:get-code($actual-resp-verse-sequence)
let $actual-resp-code-verse-next := http-utils:get-code($actual-resp-verse-next)
let $actual-resp-code-verse-next-next := http-utils:get-code($actual-resp-verse-next-next)
let $actual-resp-code-verse-sequence-next := http-utils:get-code($actual-resp-verse-sequence-next)
let $actual-resp-code-verse-sequence-overlapping-1 := http-utils:get-code($actual-resp-verse-sequence-overlapping-1)
let $actual-resp-code-verse-sequence-overlapping-2 := http-utils:get-code($actual-resp-verse-sequence-overlapping-2)
let $actual-resp-code-verse-sequence-overlapping-3 := http-utils:get-code($actual-resp-verse-sequence-overlapping-3)
let $actual-resp-code-verse-range-sequence-overlapping := http-utils:get-code($actual-resp-verse-range-sequence-overlapping)
let $actual-resp-code-siglum-variety-1 := http-utils:get-code($actual-resp-siglum-variety-1)
let $actual-resp-code-siglum-variety-2 := http-utils:get-code($actual-resp-siglum-variety-2)
let $actual-resp-code-siglum-variety-3 := http-utils:get-code($actual-resp-siglum-variety-3)
let $actual-resp-code-siglum-variety-4 := http-utils:get-code($actual-resp-siglum-variety-4)

let $actual-resp-msg-siglum-invalid := http-utils:get-message($actual-resp-siglum-invalid)
let $actual-resp-msg-siglum-tome := http-utils:get-message($actual-resp-siglum-tome)
let $actual-resp-msg-single-chapter := http-utils:get-message($actual-resp-single-chapter)
let $actual-resp-msg-chapter-range-correct := http-utils:get-message($actual-resp-chapter-range-correct)
let $actual-resp-msg-chapter-range-incorrect-1 := http-utils:get-message($actual-resp-chapter-range-incorrect-1)
let $actual-resp-msg-chapter-range-incorrect-2 := http-utils:get-message($actual-resp-chapter-range-incorrect-2)
let $actual-resp-msg-chapter-range-overlapping := http-utils:get-message($actual-resp-chapter-range-overlapping)
let $actual-resp-msg-chapter-range-overlapping-2 := http-utils:get-message($actual-resp-chapter-range-overlapping-2)
let $actual-resp-msg-chapter-sequence := http-utils:get-message($actual-resp-chapter-sequence)
let $actual-resp-msg-chapter-sequence-overlapping := http-utils:get-message($actual-resp-chapter-sequence-overlapping)
let $actual-resp-msg-chapter-range-sequence-overlapping := http-utils:get-message($actual-resp-chapter-range-sequence-overlapping)
let $actual-resp-msg-single-verse := http-utils:get-message($actual-resp-single-verse)
let $actual-resp-msg-verse-range-correct := http-utils:get-message($actual-resp-verse-range-correct)
let $actual-resp-msg-verse-range-incorrect-1 := http-utils:get-message($actual-resp-verse-range-incorrect-1)
let $actual-resp-msg-verse-range-incorrect-2 := http-utils:get-message($actual-resp-verse-range-incorrect-2)
let $actual-resp-msg-verse-range-overlapping := http-utils:get-message($actual-resp-verse-range-overlapping)
let $actual-resp-msg-verse-sequence := http-utils:get-message($actual-resp-verse-sequence)
let $actual-resp-msg-verse-next := http-utils:get-message($actual-resp-verse-next)
let $actual-resp-msg-verse-next-next := http-utils:get-message($actual-resp-verse-next-next)
let $actual-resp-msg-verse-sequence-next := http-utils:get-message($actual-resp-verse-sequence-next)
let $actual-resp-msg-verse-sequence-overlapping-1 := http-utils:get-message($actual-resp-verse-sequence-overlapping-1)
let $actual-resp-msg-verse-sequence-overlapping-2 := http-utils:get-message($actual-resp-verse-sequence-overlapping-2)
let $actual-resp-msg-verse-sequence-overlapping-3 := http-utils:get-message($actual-resp-verse-sequence-overlapping-3)
let $actual-resp-msg-verse-range-sequence-overlapping := http-utils:get-message($actual-resp-verse-range-sequence-overlapping)
let $actual-resp-msg-siglum-variety-1 := http-utils:get-message($actual-resp-siglum-variety-1)
let $actual-resp-msg-siglum-variety-2 := http-utils:get-message($actual-resp-siglum-variety-2)
let $actual-resp-msg-siglum-variety-3 := http-utils:get-message($actual-resp-siglum-variety-3)
let $actual-resp-msg-siglum-variety-4 := http-utils:get-message($actual-resp-siglum-variety-4)

let $actual-resp-body-siglum-invalid := http-utils:get-body($actual-resp-siglum-invalid)
let $actual-resp-body-siglum-tome := http-utils:get-body($actual-resp-siglum-tome)
let $actual-resp-body-single-chapter := http-utils:get-body($actual-resp-single-chapter)
let $actual-resp-body-chapter-range-correct := http-utils:get-body($actual-resp-chapter-range-correct)
let $actual-resp-body-chapter-range-incorrect-1 := http-utils:get-body($actual-resp-chapter-range-incorrect-1)
let $actual-resp-body-chapter-range-incorrect-2 := http-utils:get-body($actual-resp-chapter-range-incorrect-2)
let $actual-resp-body-chapter-range-overlapping := http-utils:get-body($actual-resp-chapter-range-overlapping)
let $actual-resp-body-chapter-range-overlapping-2 := http-utils:get-body($actual-resp-chapter-range-overlapping-2)
let $actual-resp-body-chapter-sequence := http-utils:get-body($actual-resp-chapter-sequence)
let $actual-resp-body-chapter-sequence-overlapping := http-utils:get-body($actual-resp-chapter-sequence-overlapping)
let $actual-resp-body-chapter-range-sequence-overlapping := http-utils:get-body($actual-resp-chapter-range-sequence-overlapping)
let $actual-resp-body-single-verse := http-utils:get-body($actual-resp-single-verse)
let $actual-resp-body-verse-range-correct := http-utils:get-body($actual-resp-verse-range-correct)
let $actual-resp-body-verse-range-incorrect-1 := http-utils:get-body($actual-resp-verse-range-incorrect-1)
let $actual-resp-body-verse-range-incorrect-2 := http-utils:get-body($actual-resp-verse-range-incorrect-2)
let $actual-resp-body-verse-range-overlapping := http-utils:get-body($actual-resp-verse-range-overlapping)
let $actual-resp-body-verse-sequence := http-utils:get-body($actual-resp-verse-sequence)
let $actual-resp-body-verse-next := http-utils:get-body($actual-resp-verse-next)
let $actual-resp-body-verse-next-next := http-utils:get-body($actual-resp-verse-next-next)
let $actual-resp-body-verse-sequence-next := http-utils:get-body($actual-resp-verse-sequence-next)
let $actual-resp-body-verse-sequence-overlapping-1 := http-utils:get-body($actual-resp-verse-sequence-overlapping-1)
let $actual-resp-body-verse-sequence-overlapping-2 := http-utils:get-body($actual-resp-verse-sequence-overlapping-2)
let $actual-resp-body-verse-sequence-overlapping-3 := http-utils:get-body($actual-resp-verse-sequence-overlapping-3)
let $actual-resp-body-verse-range-sequence-overlapping := http-utils:get-body($actual-resp-verse-range-sequence-overlapping)
let $actual-resp-body-siglum-variety-1 := http-utils:get-body($actual-resp-siglum-variety-1)
let $actual-resp-body-siglum-variety-2 := http-utils:get-body($actual-resp-siglum-variety-2)
let $actual-resp-body-siglum-variety-3 := http-utils:get-body($actual-resp-siglum-variety-3)
let $actual-resp-body-siglum-variety-4 := http-utils:get-body($actual-resp-siglum-variety-4)

return (
    test:assert-equal(400, $actual-resp-code-siglum-invalid, 'Incorrect response code for rs:sigla=' || $SIGLUM-INVALID),
    test:assert-equal(200, $actual-resp-code-siglum-tome, 'Incorrect response code for rs:sigla=' || $SIGLUM-TOME),
    test:assert-equal(200, $actual-resp-code-single-chapter, 'Incorrect response code for rs:sigla=' || $SIGLUM-SINGLE-CHAPTER),
    test:assert-equal(200, $actual-resp-code-chapter-range-correct, 'Incorrect response code for rs:sigla=' || $SIGLUM-CHAPTER-RANGE-CORRECT),
    test:assert-equal(400, $actual-resp-code-chapter-range-incorrect-1, 'Incorrect response code for rs:sigla=' || $SIGLUM-CHAPTER-RANGE-INCORRECT-1),
    test:assert-equal(400, $actual-resp-code-chapter-range-incorrect-2, 'Incorrect response code for rs:sigla=' || $SIGLUM-CHAPTER-RANGE-INCORRECT-2),
    test:assert-equal(400, $actual-resp-code-chapter-range-overlapping, 'Incorrect response code for rs:sigla=' || $SIGLUM-CHAPTER-RANGE-OVERLAPPING),
    test:assert-equal(400, $actual-resp-code-chapter-range-overlapping-2, 'Incorrect response code for rs:sigla=' || $SIGLUM-CHAPTER-RANGE-OVERLAPPING-2),
    test:assert-equal(200, $actual-resp-code-chapter-sequence, 'Incorrect response code for rs:sigla=' || $SIGLUM-CHAPTER-SEQUENCE),
    test:assert-equal(400, $actual-resp-code-chapter-sequence-overlapping, 'Incorrect response code for rs:sigla=' || $SIGLUM-CHAPTER-SEQUENCE-OVERLAPPING),
    test:assert-equal(400, $actual-resp-code-chapter-range-sequence-overlapping, 'Incorrect response code for rs:sigla=' || $SIGLUM-CHAPTER-RANGE-SEQUENCE-OVERLAPPING),
    test:assert-equal(200, $actual-resp-code-single-verse, 'Incorrect response code for rs:sigla=' || $SIGLUM-SINGLE-VERSE),
    test:assert-equal(200, $actual-resp-code-verse-range-correct, 'Incorrect response code for rs:sigla=' || $SIGLUM-VERSE-RANGE-CORRECT),
    test:assert-equal(400, $actual-resp-code-verse-range-incorrect-1, 'Incorrect response code for rs:sigla=' || $SIGLUM-VERSE-RANGE-INCORRECT-1),
    test:assert-equal(400, $actual-resp-code-verse-range-incorrect-2, 'Incorrect response code for rs:sigla=' || $SIGLUM-VERSE-RANGE-INCORRECT-2),
    test:assert-equal(400, $actual-resp-code-verse-range-overlapping, 'Incorrect response code for rs:sigla=' || $SIGLUM-VERSE-RANGE-OVERLAPPING),
    test:assert-equal(200, $actual-resp-code-verse-sequence, 'Incorrect response code for rs:sigla=' || $SIGLUM-VERSE-SEQUENCE),
    test:assert-equal(200, $actual-resp-code-verse-next, 'Incorrect response code for rs:sigla=' || $SIGLUM-VERSE-NEXT),
    test:assert-equal(200, $actual-resp-code-verse-next-next, 'Incorrect response code for rs:sigla=' || $SIGLUM-VERSE-NEXT-NEXT),
    test:assert-equal(200, $actual-resp-code-verse-sequence-next, 'Incorrect response code for rs:sigla=' || $SIGLUM-VERSE-SEQUENCE-NEXT),
    test:assert-equal(400, $actual-resp-code-verse-sequence-overlapping-1, 'Incorrect response code for rs:sigla=' || $SIGLUM-VERSE-SEQUENCE-OVERLAPPING-1),
    test:assert-equal(400, $actual-resp-code-verse-sequence-overlapping-2, 'Incorrect response code for rs:sigla=' || $SIGLUM-VERSE-SEQUENCE-OVERLAPPING-2),
    test:assert-equal(400, $actual-resp-code-verse-sequence-overlapping-3, 'Incorrect response code for rs:sigla=' || $SIGLUM-VERSE-SEQUENCE-OVERLAPPING-3),
    test:assert-equal(400, $actual-resp-code-verse-range-sequence-overlapping, 'Incorrect response code for rs:sigla=' || $SIGLUM-VERSE-RANGE-SEQUENCE-OVERLAPPING),
    test:assert-equal(200, $actual-resp-code-siglum-variety-1, 'Incorrect response code for rs:sigla=' || $SIGLUM-VARIETY-1),
    test:assert-equal(400, $actual-resp-code-siglum-variety-2, 'Incorrect response code for rs:sigla=' || $SIGLUM-VARIETY-2),
    test:assert-equal(400, $actual-resp-code-siglum-variety-3, 'Incorrect response code for rs:sigla=' || $SIGLUM-VARIETY-3),
    test:assert-equal(400, $actual-resp-code-siglum-variety-4, 'Incorrect response code for rs:sigla=' || $SIGLUM-VARIETY-4),

    test:assert-equal('Bad Request', $actual-resp-msg-siglum-invalid, 'Incorrect response message for rs:sigla=' || $SIGLUM-INVALID),
    test:assert-equal('OK', $actual-resp-msg-siglum-tome, 'Incorrect response message for rs:sigla=' || $SIGLUM-TOME),
    test:assert-equal('OK', $actual-resp-msg-single-chapter, 'Incorrect response message for rs:sigla=' || $SIGLUM-SINGLE-CHAPTER),
    test:assert-equal('OK', $actual-resp-msg-chapter-range-correct, 'Incorrect response message for rs:sigla=' || $SIGLUM-CHAPTER-RANGE-CORRECT),
    test:assert-equal('Bad Request', $actual-resp-msg-chapter-range-incorrect-1, 'Incorrect response message for rs:sigla=' || $SIGLUM-CHAPTER-RANGE-INCORRECT-1),
    test:assert-equal('Bad Request', $actual-resp-msg-chapter-range-incorrect-2, 'Incorrect response message for rs:sigla=' || $SIGLUM-CHAPTER-RANGE-INCORRECT-2),
    test:assert-equal('Bad Request', $actual-resp-msg-chapter-range-overlapping, 'Incorrect response message for rs:sigla=' || $SIGLUM-CHAPTER-RANGE-OVERLAPPING),
    test:assert-equal('Bad Request', $actual-resp-msg-chapter-range-overlapping-2, 'Incorrect response message for rs:sigla=' || $SIGLUM-CHAPTER-RANGE-OVERLAPPING-2),
    test:assert-equal('OK', $actual-resp-msg-chapter-sequence, 'Incorrect response message for rs:sigla=' || $SIGLUM-CHAPTER-SEQUENCE),
    test:assert-equal('Bad Request', $actual-resp-msg-chapter-sequence-overlapping, 'Incorrect response message for rs:sigla=' || $SIGLUM-CHAPTER-SEQUENCE-OVERLAPPING),
    test:assert-equal('Bad Request', $actual-resp-msg-chapter-range-sequence-overlapping, 'Incorrect response message for rs:sigla=' || $SIGLUM-CHAPTER-RANGE-SEQUENCE-OVERLAPPING),
    test:assert-equal('OK', $actual-resp-msg-single-verse, 'Incorrect response message for rs:sigla=' || $SIGLUM-SINGLE-VERSE),
    test:assert-equal('OK', $actual-resp-msg-verse-range-correct, 'Incorrect response message for rs:sigla=' || $SIGLUM-VERSE-RANGE-CORRECT),
    test:assert-equal('Bad Request', $actual-resp-msg-verse-range-incorrect-1, 'Incorrect response message for rs:sigla=' || $SIGLUM-VERSE-RANGE-INCORRECT-1),
    test:assert-equal('Bad Request', $actual-resp-msg-verse-range-incorrect-2, 'Incorrect response message for rs:sigla=' || $SIGLUM-VERSE-RANGE-INCORRECT-2),
    test:assert-equal('Bad Request', $actual-resp-msg-verse-range-overlapping, 'Incorrect response message for rs:sigla=' || $SIGLUM-VERSE-RANGE-OVERLAPPING),
    test:assert-equal('OK', $actual-resp-msg-verse-sequence, 'Incorrect response message for rs:sigla=' || $SIGLUM-VERSE-SEQUENCE),
    test:assert-equal('OK', $actual-resp-msg-verse-next, 'Incorrect response message for rs:sigla=' || $SIGLUM-VERSE-NEXT),
    test:assert-equal('OK', $actual-resp-msg-verse-next-next, 'Incorrect response message for rs:sigla=' || $SIGLUM-VERSE-NEXT-NEXT),
    test:assert-equal('OK', $actual-resp-msg-verse-sequence-next, 'Incorrect response message for rs:sigla=' || $SIGLUM-VERSE-SEQUENCE-NEXT),
    test:assert-equal('Bad Request', $actual-resp-msg-verse-sequence-overlapping-1, 'Incorrect response message for rs:sigla=' || $SIGLUM-VERSE-SEQUENCE-OVERLAPPING-1),
    test:assert-equal('Bad Request', $actual-resp-msg-verse-sequence-overlapping-2, 'Incorrect response message for rs:sigla=' || $SIGLUM-VERSE-SEQUENCE-OVERLAPPING-2),
    test:assert-equal('Bad Request', $actual-resp-msg-verse-sequence-overlapping-3, 'Incorrect response message for rs:sigla=' || $SIGLUM-VERSE-SEQUENCE-OVERLAPPING-3),
    test:assert-equal('Bad Request', $actual-resp-msg-verse-range-sequence-overlapping, 'Incorrect response message for rs:sigla=' || $SIGLUM-VERSE-RANGE-SEQUENCE-OVERLAPPING),
    test:assert-equal('OK', $actual-resp-msg-siglum-variety-1, 'Incorrect response message for rs:sigla=' || $SIGLUM-VARIETY-1),
    test:assert-equal('Bad Request', $actual-resp-msg-siglum-variety-2, 'Incorrect response message for rs:sigla=' || $SIGLUM-VARIETY-2),
    test:assert-equal('Bad Request', $actual-resp-msg-siglum-variety-3, 'Incorrect response message for rs:sigla=' || $SIGLUM-VARIETY-3),
    test:assert-equal('Bad Request', $actual-resp-msg-siglum-variety-4, 'Incorrect response message for rs:sigla=' || $SIGLUM-VARIETY-4),

    test:assert-equal($expected-resp-body-siglum-invalid, $actual-resp-body-siglum-invalid, 'Different response bodies for rs:sigla=' || $SIGLUM-INVALID),
    test:assert-equal($expected-resp-body-siglum-tome, $actual-resp-body-siglum-tome, 'Different response bodies for rs:sigla=' || $SIGLUM-TOME),
    test:assert-equal($expected-resp-body-single-chapter, $actual-resp-body-single-chapter, 'Different response bodies for rs:sigla=' || $SIGLUM-SINGLE-CHAPTER),
    test:assert-equal($expected-resp-body-chapter-range-correct, $actual-resp-body-chapter-range-correct, 'Different response bodies for rs:sigla=' || $SIGLUM-CHAPTER-RANGE-CORRECT),
    test:assert-equal($expected-resp-body-chapter-range-incorrect-1, $actual-resp-body-chapter-range-incorrect-1, 'Different response bodies for rs:sigla=' || $SIGLUM-CHAPTER-RANGE-INCORRECT-1),
    test:assert-equal($expected-resp-body-chapter-range-incorrect-2, $actual-resp-body-chapter-range-incorrect-2, 'Different response bodies for rs:sigla=' || $SIGLUM-CHAPTER-RANGE-INCORRECT-2),
    test:assert-equal($expected-resp-body-chapter-range-overlapping, $actual-resp-body-chapter-range-overlapping, 'Different response bodies for rs:sigla=' || $SIGLUM-CHAPTER-RANGE-OVERLAPPING),
    test:assert-equal($expected-resp-body-chapter-range-overlapping-2, $actual-resp-body-chapter-range-overlapping-2, 'Different response bodies for rs:sigla=' || $SIGLUM-CHAPTER-RANGE-OVERLAPPING-2),
    test:assert-equal($expected-resp-body-chapter-sequence, $actual-resp-body-chapter-sequence, 'Different response bodies for rs:sigla=' || $SIGLUM-CHAPTER-SEQUENCE),
    test:assert-equal($expected-resp-body-chapter-sequence-overlapping, $actual-resp-body-chapter-sequence-overlapping, 'Different response bodies for rs:sigla=' || $SIGLUM-CHAPTER-SEQUENCE-OVERLAPPING),
    test:assert-equal($expected-resp-body-chapter-range-sequence-overlapping, $actual-resp-body-chapter-range-sequence-overlapping, 'Different response bodies for rs:sigla=' || $SIGLUM-CHAPTER-RANGE-SEQUENCE-OVERLAPPING),
    test:assert-equal($expected-resp-body-single-verse, $actual-resp-body-single-verse, 'Different response bodies for rs:sigla=' || $SIGLUM-SINGLE-VERSE),
    test:assert-equal($expected-resp-body-verse-range-correct, $actual-resp-body-verse-range-correct, 'Different response bodies for rs:sigla=' || $SIGLUM-VERSE-RANGE-CORRECT),
    test:assert-equal($expected-resp-body-verse-range-incorrect-1, $actual-resp-body-verse-range-incorrect-1, 'Different response bodies for rs:sigla=' || $SIGLUM-VERSE-RANGE-INCORRECT-1),
    test:assert-equal($expected-resp-body-verse-range-incorrect-2, $actual-resp-body-verse-range-incorrect-2, 'Different response bodies for rs:sigla=' || $SIGLUM-VERSE-RANGE-INCORRECT-2),
    test:assert-equal($expected-resp-body-verse-range-overlapping, $actual-resp-body-verse-range-overlapping, 'Different response bodies for rs:sigla=' || $SIGLUM-VERSE-RANGE-OVERLAPPING),
    test:assert-equal($expected-resp-body-verse-sequence, $actual-resp-body-verse-sequence, 'Different response bodies for rs:sigla=' || $SIGLUM-VERSE-SEQUENCE),
    test:assert-equal($expected-resp-body-verse-next, $actual-resp-body-verse-next, 'Different response bodies for rs:sigla=' || $SIGLUM-VERSE-NEXT),
    test:assert-equal($expected-resp-body-verse-next-next, $actual-resp-body-verse-next-next, 'Different response bodies for rs:sigla=' || $SIGLUM-VERSE-NEXT-NEXT),
    test:assert-equal($expected-resp-body-verse-sequence-next, $actual-resp-body-verse-sequence-next, 'Different response bodies for rs:sigla=' || $SIGLUM-VERSE-SEQUENCE-NEXT),
    test:assert-equal($expected-resp-body-verse-sequence-overlapping-1, $actual-resp-body-verse-sequence-overlapping-1, 'Different response bodies for rs:sigla=' || $SIGLUM-VERSE-SEQUENCE-OVERLAPPING-1),
    test:assert-equal($expected-resp-body-verse-sequence-overlapping-2, $actual-resp-body-verse-sequence-overlapping-2, 'Different response bodies for rs:sigla=' || $SIGLUM-VERSE-SEQUENCE-OVERLAPPING-2),
    test:assert-equal($expected-resp-body-verse-sequence-overlapping-3, $actual-resp-body-verse-sequence-overlapping-3, 'Different response bodies for rs:sigla=' || $SIGLUM-VERSE-SEQUENCE-OVERLAPPING-3),
    test:assert-equal($expected-resp-body-verse-range-sequence-overlapping, $actual-resp-body-verse-range-sequence-overlapping, 'Different response bodies for rs:sigla=' || $SIGLUM-VERSE-RANGE-SEQUENCE-OVERLAPPING),
    test:assert-equal($expected-resp-body-siglum-variety-1, $actual-resp-body-siglum-variety-1, 'Different response bodies for rs:sigla=' || $SIGLUM-VARIETY-1),
    test:assert-equal($expected-resp-body-siglum-variety-2, $actual-resp-body-siglum-variety-2, 'Different response bodies for rs:sigla=' || $SIGLUM-VARIETY-2),
    test:assert-equal($expected-resp-body-siglum-variety-3, $actual-resp-body-siglum-variety-3, 'Different response bodies for rs:sigla=' || $SIGLUM-VARIETY-3),
    test:assert-equal($expected-resp-body-siglum-variety-4, $actual-resp-body-siglum-variety-4, 'Different response bodies for rs:sigla=' || $SIGLUM-VARIETY-4)
)