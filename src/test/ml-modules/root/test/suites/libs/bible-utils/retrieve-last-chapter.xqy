xquery version "1.0-ml";

import module namespace test = "http://marklogic.com/test" at "/test/test-helper.xqy";
import module namespace bib = "http://marklogic.com/holy/ml-modules/bible-utils" at "/libs/bible-utils.xqy";

declare variable $TOME-LAS-CHAPTER-MAP :=
    map:map()
    => map:with('Rdz', '50')
    => map:with('Wj', '40')
    => map:with('Kpł', '27')
    => map:with('Lb', '36')
    => map:with('Pwt', '34')
    => map:with('Joz', '24')
    => map:with('Sdz', '21')
    => map:with('Rt', '4')
    => map:with('1Sm', '31')
    => map:with('2Sm', '24')
    => map:with('1Krl', '22')
    => map:with('2Krl', '25')
    => map:with('1Krn', '29')
    => map:with('2Krn', '36')
    => map:with('Ezd', '10')
    => map:with('Ne', '13')
    => map:with('Tb', '14')
    => map:with('Jdt', '16')
    => map:with('Est', '10')
    => map:with('1Mch', '16')
    => map:with('2Mch', '15')
    => map:with('Hi', '42')
    => map:with('Ps', '150')
    => map:with('Prz', '31')
    => map:with('Koh', '12')
    => map:with('Pnp', '8')
    => map:with('Mdr', '19')
    => map:with('Syr', '51')
    => map:with('Iz', '66')
    => map:with('Jr', '52')
    => map:with('Lm', '5')
    => map:with('Ba', '6')
    => map:with('Ez', '48')
    => map:with('Dn', '14')
    => map:with('Oz', '14')
    => map:with('Jl', '4')
    => map:with('Am', '9')
    => map:with('Ab', '1')
    => map:with('Jon', '4')
    => map:with('Mi', '7')
    => map:with('Na', '3')
    => map:with('Ha', '3')
    => map:with('So', '3')
    => map:with('Ag', '2')
    => map:with('Za', '14')
    => map:with('Ml', '3')
    => map:with('Mt', '28')
    => map:with('Mk', '16')
    => map:with('Łk', '24')
    => map:with('J', '21')
    => map:with('Dz', '28')
    => map:with('Rz', '16')
    => map:with('1Kor', '16')
    => map:with('2Kor', '13')
    => map:with('Ga', '6')
    => map:with('Ef', '6')
    => map:with('Flp', '4')
    => map:with('Kol', '4')
    => map:with('1Tes', '5')
    => map:with('2Tes', '3')
    => map:with('1Tm', '6')
    => map:with('2Tm', '4')
    => map:with('Tt', '3')
    => map:with('Flm', '1')
    => map:with('Hbr', '13')
    => map:with('Jk', '5')
    => map:with('1P', '5')
    => map:with('2P', '3')
    => map:with('1J', '5')
    => map:with('2J', '1')
    => map:with('3J', '1')
    => map:with('Jud', '1')
    => map:with('Ap', '22');

for $tome-siglum in map:keys($TOME-LAS-CHAPTER-MAP)
let $expected := map:get($TOME-LAS-CHAPTER-MAP, $tome-siglum)
let $actual := bib:retrieve-last-chapter($tome-siglum)
return test:assert-equal($expected, $actual, 'Incorrect last chapter assignement for tome ' || $tome-siglum)